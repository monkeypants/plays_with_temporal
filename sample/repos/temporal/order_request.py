"""
Temporal activity wrapper and workflow proxy for order_request repository.

This module contains:
1. The @temporal_activity_registration decorated class that wraps the pure
   backend MinioOrderRequestRepository as Temporal activities (for worker use)
2. The @temporal_workflow_proxy decorated class that automatically generates
   workflow methods that delegate to activities

The activity names follow the pattern:
sample.order_request_repo.minio.{method}
"""

from util.repos.temporal.decorators import (
    temporal_activity_registration,
    temporal_workflow_proxy,
)
from sample.repos.minio.order_request import MinioOrderRequestRepository
from sample.repositories import OrderRequestRepository

# Activity name base used by both the temporal repository and workflow proxy
ACTIVITY_NAME_BASE = "sample.order_request_repo.minio"


@temporal_activity_registration(ACTIVITY_NAME_BASE)
class TemporalMinioOrderRequestRepository(MinioOrderRequestRepository):
    """Temporal activity wrapper for MinioOrderRequestRepository."""

    pass


@temporal_workflow_proxy(
    activity_base=ACTIVITY_NAME_BASE,
    default_timeout_seconds=10,
)
class WorkflowOrderRequestRepositoryProxy(OrderRequestRepository):
    """
    Workflow implementation of OrderRequestRepository that calls activities.
    All methods are automatically generated by the @temporal_workflow_proxy
    decorator.
    """

    pass
