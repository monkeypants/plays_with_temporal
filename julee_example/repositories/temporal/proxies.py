"""
Workflow-safe proxy classes for the julee_example domain.

This module contains all @temporal_workflow_proxy decorated classes that
delegate to Temporal activities from within workflows. These classes are
isolated from backend imports to avoid Temporal's workflow sandbox
restrictions.

The proxy classes automatically generate methods that call
workflow.execute_activity() with the appropriate activity names, timeouts,
and retry policies.
"""

from util.temporal.decorators import temporal_workflow_proxy
from julee_example.repositories.assembly import AssemblyRepository
from julee_example.repositories.assembly_specification import (
    AssemblySpecificationRepository,
)
from julee_example.repositories.document import DocumentRepository
from julee_example.repositories.knowledge_service_config import (
    KnowledgeServiceConfigRepository,
)
from julee_example.repositories.knowledge_service_query import (
    KnowledgeServiceQueryRepository,
)

# Import activity name bases from shared module
from julee_example.repositories.temporal.activity_names import (
    ASSEMBLY_ACTIVITY_BASE,
    ASSEMBLY_SPECIFICATION_ACTIVITY_BASE,
    DOCUMENT_ACTIVITY_BASE,
    KNOWLEDGE_SERVICE_CONFIG_ACTIVITY_BASE,
    KNOWLEDGE_SERVICE_QUERY_ACTIVITY_BASE,
)


@temporal_workflow_proxy(
    activity_base=ASSEMBLY_ACTIVITY_BASE,
    default_timeout_seconds=30,
    retry_methods=["save", "generate_id"],
)
class WorkflowAssemblyRepositoryProxy(AssemblyRepository):
    """
    Workflow implementation of AssemblyRepository that calls activities.
    All methods are automatically generated by the @temporal_workflow_proxy
    decorator.
    """

    pass


@temporal_workflow_proxy(
    activity_base=ASSEMBLY_SPECIFICATION_ACTIVITY_BASE,
    default_timeout_seconds=30,
    retry_methods=["save", "generate_id"],
)
class WorkflowAssemblySpecificationRepositoryProxy(
    AssemblySpecificationRepository
):
    """
    Workflow implementation of AssemblySpecificationRepository that calls
    activities.
    All methods are automatically generated by the @temporal_workflow_proxy
    decorator.
    """

    pass


@temporal_workflow_proxy(
    activity_base=DOCUMENT_ACTIVITY_BASE,
    default_timeout_seconds=30,
    retry_methods=["save", "generate_id"],
)
class WorkflowDocumentRepositoryProxy(DocumentRepository):
    """
    Workflow implementation of DocumentRepository that calls activities.
    All methods are automatically generated by the @temporal_workflow_proxy
    decorator.
    """

    pass


@temporal_workflow_proxy(
    activity_base=KNOWLEDGE_SERVICE_CONFIG_ACTIVITY_BASE,
    default_timeout_seconds=30,
    retry_methods=["save", "generate_id"],
)
class WorkflowKnowledgeServiceConfigRepositoryProxy(
    KnowledgeServiceConfigRepository
):
    """
    Workflow implementation of KnowledgeServiceConfigRepository that calls
    activities.
    All methods are automatically generated by the @temporal_workflow_proxy
    decorator.
    """

    pass


@temporal_workflow_proxy(
    activity_base=KNOWLEDGE_SERVICE_QUERY_ACTIVITY_BASE,
    default_timeout_seconds=30,
    retry_methods=["save", "generate_id"],
)
class WorkflowKnowledgeServiceQueryRepositoryProxy(
    KnowledgeServiceQueryRepository
):
    """
    Workflow implementation of KnowledgeServiceQueryRepository that calls
    activities.
    All methods are automatically generated by the @temporal_workflow_proxy
    decorator.
    """

    pass


# Export the workflow proxy classes
__all__ = [
    "WorkflowAssemblyRepositoryProxy",
    "WorkflowAssemblySpecificationRepositoryProxy",
    "WorkflowDocumentRepositoryProxy",
    "WorkflowKnowledgeServiceConfigRepositoryProxy",
    "WorkflowKnowledgeServiceQueryRepositoryProxy",
]
