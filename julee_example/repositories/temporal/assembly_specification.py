"""
Temporal activity wrapper and workflow proxy for assembly specification
repository.

This module contains:
1. The @temporal_activity_registration decorated class that wraps the pure
   backend MinioAssemblySpecificationRepository as Temporal activities
   (for worker use only)
2. The @temporal_workflow_proxy decorated class that automatically generates
   workflow methods that delegate to activities

The activity names follow the pattern:
julee.assembly_specification_repo.minio.{method}
"""

from util.repos.temporal.decorators import (
    temporal_activity_registration,
    temporal_workflow_proxy,
)
from julee_example.repositories.minio.assembly_specification import (
    MinioAssemblySpecificationRepository,
)
from julee_example.repositories.assembly_specification import (
    AssemblySpecificationRepository,
)

# Activity name base used by both the temporal repository and workflow proxy
ACTIVITY_NAME_BASE = "julee.assembly_specification_repo.minio"


@temporal_activity_registration(ACTIVITY_NAME_BASE)
class TemporalMinioAssemblySpecificationRepository(
    MinioAssemblySpecificationRepository
):
    """Temporal activity wrapper for MinioAssemblySpecificationRepository."""

    pass


@temporal_workflow_proxy(
    activity_base=ACTIVITY_NAME_BASE,
    default_timeout_seconds=30,
    retry_methods=["save", "generate_id"],
)
class WorkflowAssemblySpecificationRepositoryProxy(
    AssemblySpecificationRepository
):
    """
    Workflow implementation of AssemblySpecificationRepository that calls
    activities.
    All methods are automatically generated by the @temporal_workflow_proxy
    decorator.
    """

    pass
