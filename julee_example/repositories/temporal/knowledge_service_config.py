"""
Temporal activity wrapper and workflow proxy for knowledge service config repository.

This module contains:
1. The @temporal_activity_registration decorated class that wraps the pure backend
   MinioKnowledgeServiceConfigRepository as Temporal activities (for worker use only)
2. The @temporal_workflow_proxy decorated class that automatically generates
   workflow methods that delegate to activities

The activity names follow the pattern: julee.knowledge_service_config_repo.minio.{method}
"""

from util.repos.temporal.decorators import temporal_activity_registration, temporal_workflow_proxy
from julee_example.repositories.minio.knowledge_service_config import MinioKnowledgeServiceConfigRepository
from julee_example.repositories.knowledge_service_config import KnowledgeServiceConfigRepository

# Activity name base used by both the temporal repository and workflow proxy
ACTIVITY_NAME_BASE = "julee.knowledge_service_config_repo.minio"


@temporal_activity_registration(ACTIVITY_NAME_BASE)
class TemporalMinioKnowledgeServiceConfigRepository(MinioKnowledgeServiceConfigRepository):
    """Temporal activity wrapper for MinioKnowledgeServiceConfigRepository."""

    pass


@temporal_workflow_proxy(
    activity_base=ACTIVITY_NAME_BASE,
    default_timeout_seconds=30,
    retry_methods=["save", "generate_id"]
)
class WorkflowKnowledgeServiceConfigRepositoryProxy(KnowledgeServiceConfigRepository):
    """
    Workflow implementation of KnowledgeServiceConfigRepository that calls activities.
    All methods are automatically generated by the @temporal_workflow_proxy decorator.
    """

    pass
