"""
Integration tests for the julee_example FastAPI application.

This module provides integration tests for the complete FastAPI application,
testing how routers work together and verifying the overall API behavior.
Router-specific tests are in the routers/ subdirectory.
"""

import pytest
from typing import Generator
from fastapi.testclient import TestClient

from julee_example.api.app import app
from julee_example.api.dependencies import (
    get_knowledge_service_query_repository,
)
from julee_example.domain.models import KnowledgeServiceQuery
from julee_example.repositories.memory import (
    MemoryKnowledgeServiceQueryRepository,
)


@pytest.fixture
def memory_repo() -> MemoryKnowledgeServiceQueryRepository:
    """Create a memory knowledge service query repository for testing."""
    return MemoryKnowledgeServiceQueryRepository()


@pytest.fixture
def client(
    memory_repo: MemoryKnowledgeServiceQueryRepository,
) -> Generator[TestClient, None, None]:
    """Create a test client with memory repository for integration tests."""
    # Override the dependency with our memory repository
    app.dependency_overrides[get_knowledge_service_query_repository] = (
        lambda: memory_repo
    )

    with TestClient(app) as test_client:
        yield test_client

    # Clean up the override after the test
    app.dependency_overrides.clear()


class TestAppIntegration:
    """Integration tests for the complete FastAPI application."""

    def test_app_starts_successfully(self, client: TestClient) -> None:
        """Test that the app starts and serves basic endpoints."""
        # Health check should work
        response = client.get("/health")
        assert response.status_code == 200

        # OpenAPI schema should be available
        response = client.get("/openapi.json")
        assert response.status_code == 200

    def test_all_routers_included_in_openapi(
        self, client: TestClient
    ) -> None:
        """Test that all routers are properly included in OpenAPI schema."""
        response = client.get("/openapi.json")
        assert response.status_code == 200

        openapi_schema = response.json()
        paths = openapi_schema.get("paths", {})

        # System endpoints
        assert "/health" in paths

        # Knowledge service query endpoints
        assert "/knowledge_service_queries/" in paths

        # Verify endpoints exist (tags are auto-generated by FastAPI)
        # We don't need to check specific tag names as they're handled automatically

    def test_cross_router_integration(
        self,
        client: TestClient,
        memory_repo: MemoryKnowledgeServiceQueryRepository,
    ) -> None:
        """Test that different routers work together correctly."""
        # Health check should always work
        health_response = client.get("/health")
        assert health_response.status_code == 200

        # Create a knowledge service query
        query_data = {
            "name": "Integration Test Query",
            "knowledge_service_id": "test-service",
            "prompt": "Test prompt for integration",
        }

        create_response = client.post(
            "/knowledge_service_queries/", json=query_data
        )
        assert create_response.status_code == 200

        # Retrieve the query
        list_response = client.get("/knowledge_service_queries/")
        assert list_response.status_code == 200

        list_data = list_response.json()
        assert list_data["total"] == 1
        assert list_data["items"][0]["name"] == query_data["name"]

        # Health check should still work after other operations
        health_response2 = client.get("/health")
        assert health_response2.status_code == 200

    def test_cors_middleware_configured(self, client: TestClient) -> None:
        """Test that CORS middleware is properly configured."""
        # TestClient doesn't fully simulate CORS behavior, but we can verify
        # the middleware is configured by making a regular request and checking
        # that it succeeds (CORS middleware doesn't interfere with normal requests)
        response = client.get("/health")
        assert response.status_code == 200
        # This confirms CORS middleware is set up without breaking normal requests

    def test_pagination_support_configured(self, client: TestClient) -> None:
        """Test that pagination is properly configured globally."""
        # Test that pagination parameters work on paginated endpoints
        response = client.get("/knowledge_service_queries/?page=1&size=50")
        assert response.status_code == 200

        data = response.json()
        # Should have pagination structure
        assert "items" in data
        assert "page" in data
        assert "size" in data
        assert "total" in data
        assert "pages" in data
