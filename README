Temporal.io Architecture Bootstrap
==================================

An opinionated starting point for Temporal.io applications with Clean Architecture patterns and comprehensive testing. Two reference applications demonstrate the approach in practice.

Vision: Benevolent sentient assistant (long-term) | Reality: Solid architectural foundation (now)

Quick Start
-----------

    pip install -r requirements.txt
    make e2e-test-setup
    make quality-fast
    make help  # See all commands

Getting Started - Running the Service
-------------------------------------

Start the complete system (Temporal server + reference applications):

    docker compose up -d

This starts:
- Temporal Server (localhost:7234)
- Temporal Web UI (http://localhost:8001)
- Sample Order API (http://localhost:8002)
- Minio Storage UI (http://localhost:9001 - admin/minioadmin)
- Calendar Worker + PostgreSQL

Verify everything is running:

    docker compose ps  # All services should show "healthy" or "running"

Try the Sample Application:

    # First, open the Temporal UI to watch workflows execute
    open http://localhost:8001

    # Create an order using the API defined by the sample project:
    curl -X POST http://localhost:8002/orders \
      -H "Content-Type: application/json" \
      -d '{"customer_id": "cust-123", "items": [{"product_id": "prod-456", "quantity": 2, "price": "19.99"}]}'

    # Check order status (use the request_id from above response)
    curl http://localhost:8002/orders/{request_id}

View the Temporal UI to explore the details of the order and associated events.

Stop everything:

    docker compose down -v  # -v removes volumes for clean restart

Architecture Roadmap
--------------------

Core Principle: Dependencies point inward. Always.

    Domain (Pure) <- Use Cases (Orchestrate) <- Adapters (Translate) <- Frameworks (Contain)

Three-Layer Repository Pattern (mandatory for all data access):
1. Pure Backend -> 2. Temporal Activity -> 3. Workflow Proxy

Workflow Determinism: Activities for I/O, workflows for logic. No exceptions.

Reference Applications
----------------------

sample/ - Order fulfillment system
Complete saga pattern with payments, inventory, cancellation. Your architectural north star.

cal/ - Calendar intelligence system
AI-powered calendar analysis with Google integration. Domain-specific patterns.

Navigation Guide
----------------

Start Here:
- make help - Build system overview
- sample/ - Reference implementation patterns
- fun-police/systemPatterns.org - Implementation rules

Deep Dive:
- fun-police/projectbrief.org - Requirements and boundaries
- fun-police/techContext.org - Technology stack decisions
- fun-police/methodology.org - Development workflow
- fun-police/tasks.org - Current work (org-mode TODOs)

Quality Gates:
- make quality-fast - Pre-commit checks
- make quality-full - Complete validation
- make test-e2e - End-to-end with Docker

Testing Strategy
----------------

    Many unit tests (mocked repositories)
    Some integration tests (real dependencies)
    Few E2E tests (complete workflows)

Development Rules
-----------------

1. Follow fun-police/tasks.org NEXT items
2. Copy patterns from sample/ exactly
3. Three-layer repositories, no shortcuts
4. Workflow determinism is non-negotiable
5. Memory bank in fun-police/ maintains institutional knowledge

When in doubt: Look at sample/, follow the patterns, trust the constraints.
